SEO

block level
> Always start from new line p,h1,div
inline element
> Start from same line <span><a><img>


if one tag have id and  class 
in css we have common property byy tagName, byId and byClass
Inline > byId > byClass >


bootstrap3
> col-lg col-md col-sm col-xs
> default, success, warning, danger, info, primary

bootstrap4
> col-xl col-lg col-md col-sm col-
> default, primary, secondary, success, info, warning, danger, dark , light
>>>>Remove<<<<<
Glyphicon
Panel

>>>>Added<<<<<
Cards
Spinners
Favicon



#@#####hile (guess != randomNumber) {     var guess = parseInt(prompt("Guess a number between 1 and 10"));     if (guess === randomNumber) {         console.log("Congrats!! You got it right in" + i + "time and random number is" + randomNumber);         break;     }     if (i > NumberOfChances) {         console.log("You have completed five chances and you lost the game");         break     }      i += 1; } var user=['Pradeep','Kittu','John','Amit'] var name=prompt("Enter a name:"); if(user.indexOf(name) != -1){     console.log("Allow access");  } else{     user.push(name);     console.log("pushed"); } 

-------------------
NPM
-------------
JSON> Javascript object notation
[
{
    "name":"John",
    "class":1
},
{
    "name":"ammy",
    "class":2
}
]

----------------------
    Package.JSON
----------------------
**NodeJs must installed
>>Navigate to the folder where you want to create
>>npm init 
>>answer all questions
>>type "yes"

________________
Local depedency
Global 

----------------------
   Step to local depedency
----------------------
>>Navigate to the folder where you want to install 
>> npm i <packageename>/npm install <packagename>

----------------------
   Step to Global depedency
----------------------
#Win
(one time)
> run cmd as admin
> npm i -g nodemon

mac/linux
> open terminal
> sudo npm i -g nodemon

----------------------
   Step to create application
----------------------
> npm i -g @aakashdeveloper/create-nodee-app 
> Navigate to the folder where you want to create
> generate
> select node app
> provide app name
> cd myapp
> npm start

////
inbuilt 
fullstack 
weatherapp 
api       
login logout
dashboard
email with node
postgress with node .5
node with redis-.5
////
react - 3
///
angular -3

/////
npm i -g nodemon
/////

/////
sno | hindi| english
1   | 80   | 
2   |      |80

-----------------
[
    {
        sno:1,
        hindi:80
    },
    {
        sno:2,
        english:80
    }
]
---------------

SQL        | NoSql
database   | database
table      | Collections
row        | document


-----MongoDB-----
https://www.mongodb.com/what-is-mongodb

Windows
> C:/data/db 

Mac/linux
mkdir /System/Volumes/Data/data/db

#Win
In One Cmd prompt
> mongod (server)

In Second Cmd prompt
> mongo (client)

#Mac
In One Cmd prompt
> sudo mongod --dbpath /System/Volumes/Data/data/db (server)

In Second Cmd prompt
> mongo (client)

>mongodb://127.0.0.1:27017

//////
 show dbs
 use classpractice
 show collections
 db.myproduct.find()
 db.myproduct.find().pretty()

//Projection
db.myproduct.find({},{class:1})
 db.myproduct.find({},{class:1,_id:0})
 db.myproduct.find({},{class:0,_id:0})
 db.myproduct.find({},{id:1,class:1,_id:0})

//Condition
db.myproduct.find({"id":4},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"Mongo"},{class:1,_id:0})
db.myproduct.find({"id":4,"class":"AI"},{class:1,_id:0})
{ "class" : "AI" }
> db.myproduct.find({"id":4"class":"AI"}{},{class:1,_id:0}).count()
1
> db.myproduct.count()

db.myproduct.find({$or:[{id:4},{class:"Mongo"}]})

/////////
db.myproduct.insert({"id":6,class:"Ansible",place:"Nareshit"})
db.myproduct.insert({"_id":002,"id":7,class:"Jenkis",place:"Nareshit"})
db.fullstackdb.insert({_id:7677557622756, "id":2,"name":"Ammy",city:"London",phone:8789885})

////////////

db.myproduct.find().sort({"place":-1})
db.myproduct.find().sort({"place":-1}).limit(3)




CRUD
create   => Post
Read     => Get
update   => PUT
Delete   => DELETE


redis
Email server

npm i bcryptjs body-parser cors express jsonwebtoken mongoose
npm i pg express


const updateUser = (request, response) => {
  const id = parseInt(request.params.id)
  const { name, email } = request.body

  pool.query(
    'UPDATE users SET name = $1, email = $2 WHERE id = $3',
    [name, email, id],
    (error, results) => {
      if (error) {
        throw error
      }
      response.status(200).send(`User modified with ID: ${id}`)
    }
  )
}

const deleteUser = (request, response) => {
  const id = parseInt(request.params.id)

  pool.query('DELETE FROM users WHERE id = $1', [id], (error, results) => {
    if (error) {
      throw error
    }
    response.status(200).send(`User deleted with ID: ${id}`)
  })
}


////
redis-server
redis-cli 

KEYS *
set key value
get 'keyname'

npm i express axios redis
